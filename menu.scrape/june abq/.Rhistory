require('XML')
datum.names = c('restaurant', 'phone', 'street', 'city', 'state', 'zip',
'menu', 'category', 'item', 'price', 'low', 'high')
data.out = NULL
menu.type = sub('http:.*/(.*)/$', '\\1', document$file)
menu.type
top = xmlRoot(document)
children = xmlChildren(top)$body
path = which(as.logical(xmlApply(children, xmlAttrs) == 'content'))
child = children[[path]]
path = as.numeric(which(xmlApply(child, xmlGetAttr, 'id') == 'restaurant'))
g.child = child[[path]]
if (!is.element('menu', xmlApply(g.child, xmlAttrs))){
return(NULL)
} else{
\
is.element('menu', xmlApply(g.child, xmlAttrs))
name = xmlValue(g.child[[as.numeric(which(xmlApply(g.child, xmlAttrs) == 'name'))]])
path = as.numeric(which(xmlApply(g.child, xmlAttrs) == 'primary_info'))
restaurant.info = g.child[[path]]
raw.address = as.character(xmlApply(restaurant.info[[as.numeric(which(xmlApply(restaurant.info, xmlGetAttr, 'id') == 'address'))]], xmlValue))
raw.phone = xmlValue(restaurant.info[[which(xmlApply(restaurant.info, xmlGetAttr, 'id') == 'phone_number')]])
if (length(raw.phone) == 0){
phone = 'NA'
} else {
\
length(raw.phone) == 0
phone = sub('\\(([[:digit:]]+)\\) (.*)', '\\1-\\2', raw.phone)
phone
raw.address[2] == ','
street = raw.address[1]
city = raw.address[3]
state = raw.address[4]
zip = raw.address[5]
path = which(as.logical(xmlApply(g.child, xmlAttrs) == 'menu'))
this.menu = g.child[[path]]
num.categories = length(xmlApply(this.menu, xmlAttrs))
num.categories
category
for (category in 1:num.categories){
this.category = this.menu[[category]]
category.string = xmlValue(this.category[[as.numeric(which(xmlApply(this.category, xmlAttrs) == 'category_head'))]][[1]])
if (length(category.string) == 0){
category.string = NA
}
category.child = this.category[[2]]
num.items.in.category = length(xmlApply(category.child, xmlAttrs))
for (item in 1:num.items.in.category){
this.item = category.child[[item]]
item.name = xmlValue(this.item[[which(xmlApply(this.item, xmlAttrs) == 'name')]])
if (length(item.name) == 0){
} else{
if (is.element('price', xmlApply(this.item, xmlAttrs))){
item.price.string = xmlValue(this.item[[which(xmlApply(this.item, xmlAttrs) == 'price')]])
if (sub('(.*) - .*', '\\1', item.price.string) == item.price.string){
item.price = as.numeric(sub('\\$([[:digit:]]+\\.[[:digit:]]+)', '\\1', item.price.string))
item.low = NA
item.high = NA
} else{
item.price = NA
priceString1 = sub('(.*) - (.*)', '\\1', item.price.string)
priceString2 = sub('(.*) - (.*)', '\\2', item.price.string)
price1 = as.numeric(sub('\\$(.*)', '\\1', priceString1))
price2 = as.numeric(sub('\\$(.*)', '\\1', priceString2))
item.low = min(c(price1, price2))
item.high = max(c(price1, price2))
}
} else {
item.price = NA
item.low = NA
item.high = NA
}
#     item.description = xmlValue(this.item[[which(xmlApply(this.item, xmlAttrs) == 'description')]])
if (sum(na.exclude(c(item.price, item.low, item.high))) != 0){
newline = c(name, phone, street, city, state, zip,
menu.type, category.string, item.name,
item.price, item.low, item.high)
cleanNewline = gsub("'", "", newline)
cleanNewline = gsub('"', '', cleanNewline)
if (length(newline) != length(datum.names)){
print(newline)
}
data.out = rbind(data.out, cleanNewline) #, item.description))
} else {
}
}
}
}
category
this.category = this.menu[[category]]
this.category
category = 7
this.category = this.menu[[category]]
this.category
category.string = xmlValue(this.category[[as.numeric(which(xmlApply(this.category, xmlAttrs) == 'category_head'))]][[1]])
category.string
category = 8
this.category = this.menu[[category]]
this.category
data.ou
data.out
for (category in 1:7){#num.categories){
this.category = this.menu[[category]]
category.string = xmlValue(this.category[[as.numeric(which(xmlApply(this.category, xmlAttrs) == 'category_head'))]][[1]])
if (length(category.string) == 0){
category.string = NA
}
category.child = this.category[[2]]
num.items.in.category = length(xmlApply(category.child, xmlAttrs))
for (item in 1:num.items.in.category){
this.item = category.child[[item]]
item.name = xmlValue(this.item[[which(xmlApply(this.item, xmlAttrs) == 'name')]])
if (length(item.name) == 0){
} else{
if (is.element('price', xmlApply(this.item, xmlAttrs))){
item.price.string = xmlValue(this.item[[which(xmlApply(this.item, xmlAttrs) == 'price')]])
if (sub('(.*) - .*', '\\1', item.price.string) == item.price.string){
item.price = as.numeric(sub('\\$([[:digit:]]+\\.[[:digit:]]+)', '\\1', item.price.string))
item.low = NA
item.high = NA
} else{
item.price = NA
priceString1 = sub('(.*) - (.*)', '\\1', item.price.string)
priceString2 = sub('(.*) - (.*)', '\\2', item.price.string)
price1 = as.numeric(sub('\\$(.*)', '\\1', priceString1))
price2 = as.numeric(sub('\\$(.*)', '\\1', priceString2))
item.low = min(c(price1, price2))
item.high = max(c(price1, price2))
}
} else {
item.price = NA
item.low = NA
item.high = NA
}
#     item.description = xmlValue(this.item[[which(xmlApply(this.item, xmlAttrs) == 'description')]])
if (sum(na.exclude(c(item.price, item.low, item.high))) != 0){
newline = c(name, phone, street, city, state, zip,
menu.type, category.string, item.name,
item.price, item.low, item.high)
cleanNewline = gsub("'", "", newline)
cleanNewline = gsub('"', '', cleanNewline)
if (length(newline) != length(datum.names)){
print(newline)
}
data.out = rbind(data.out, cleanNewline) #, item.description))
} else {
}
}
}
}
colnames(data.out) = datum.names
data.out
cleanNewline
na.exclude(c(item.price, item.low, item.high))
sum(na.exclude(c(item.price, item.low, item.high)))
is.element('price', xmlApply(this.item, xmlAttrs))
item.price.string = xmlValue(this.item[[which(xmlApply(this.item, xmlAttrs) == 'price')]])
item.price.string
if (sub('(.*) - .*', '\\1', item.price.string) == item.price.string){
item.price = as.numeric(sub('\\$([[:digit:]]+\\.[[:digit:]]+)', '\\1', item.price.string))
item.low = NA
item.high = NA
} else{
item.price = NA
priceString1 = sub('(.*) - (.*)', '\\1', item.price.string)
priceString2 = sub('(.*) - (.*)', '\\2', item.price.string)
price1 = as.numeric(sub('\\$(.*)', '\\1', priceString1))
price2 = as.numeric(sub('\\$(.*)', '\\1', priceString2))
item.low = min(c(price1, price2))
item.high = max(c(price1, price2))
}
} else {
document = htmlList[[115]]
require('XML')
datum.names = c('restaurant', 'phone', 'street', 'city', 'state', 'zip',
'menu', 'category', 'item', 'price', 'low', 'high')
data.out = NULL
menu.type = sub('http:.*/(.*)/$', '\\1', document$file)
top = xmlRoot(document)
children = xmlChildren(top)$body
path = which(as.logical(xmlApply(children, xmlAttrs) == 'content'))
child = children[[path]]
path = as.numeric(which(xmlApply(child, xmlGetAttr, 'id') == 'restaurant'))
g.child = child[[path]]
if (!is.element('menu', xmlApply(g.child, xmlAttrs))){
return(NULL)
} else{
# getting basic restaurant info
name = xmlValue(g.child[[as.numeric(which(xmlApply(g.child, xmlAttrs) == 'name'))]])
path = as.numeric(which(xmlApply(g.child, xmlAttrs) == 'primary_info'))
restaurant.info = g.child[[path]]
raw.address = as.character(xmlApply(restaurant.info[[as.numeric(which(xmlApply(restaurant.info, xmlGetAttr, 'id') == 'address'))]], xmlValue))
raw.phone = xmlValue(restaurant.info[[which(xmlApply(restaurant.info, xmlGetAttr, 'id') == 'phone_number')]])
if (length(raw.phone) == 0){
phone = 'NA'
} else {
phone = sub('\\(([[:digit:]]+)\\) (.*)', '\\1-\\2', raw.phone)
}
if (raw.address[2] == ','){
street = raw.address[1]
city = raw.address[3]
state = raw.address[4]
zip = raw.address[5]
} else {(stop('document -> content -> restaurant -> primary_info -> address is not in anticipated format'))}
# move to menu node
path = which(as.logical(xmlApply(g.child, xmlAttrs) == 'menu'))
this.menu = g.child[[path]]
num.categories = length(xmlApply(this.menu, xmlAttrs))
for (category in 1:7){#num.categories){
this.category = this.menu[[category]]
category.string = xmlValue(this.category[[as.numeric(which(xmlApply(this.category, xmlAttrs) == 'category_head'))]][[1]])
if (length(category.string) == 0){
category.string = NA
}
category.child = this.category[[2]]
num.items.in.category = length(xmlApply(category.child, xmlAttrs))
\
require('XML')
datum.names = c('restaurant', 'phone', 'street', 'city', 'state', 'zip',
'menu', 'category', 'item', 'price', 'low', 'high')
data.out = NULL
menu.type = sub('http:.*/(.*)/$', '\\1', document$file)
top = xmlRoot(document)
children = xmlChildren(top)$body
path = which(as.logical(xmlApply(children, xmlAttrs) == 'content'))
child = children[[path]]
path = as.numeric(which(xmlApply(child, xmlGetAttr, 'id') == 'restaurant'))
g.child = child[[path]]
if (!is.element('menu', xmlApply(g.child, xmlAttrs))){
return(NULL)
} else{
# getting basic restaurant info
name = xmlValue(g.child[[as.numeric(which(xmlApply(g.child, xmlAttrs) == 'name'))]])
path = as.numeric(which(xmlApply(g.child, xmlAttrs) == 'primary_info'))
restaurant.info = g.child[[path]]
raw.address = as.character(xmlApply(restaurant.info[[as.numeric(which(xmlApply(restaurant.info, xmlGetAttr, 'id') == 'address'))]], xmlValue))
raw.phone = xmlValue(restaurant.info[[which(xmlApply(restaurant.info, xmlGetAttr, 'id') == 'phone_number')]])
if (length(raw.phone) == 0){
phone = 'NA'
} else {
phone = sub('\\(([[:digit:]]+)\\) (.*)', '\\1-\\2', raw.phone)
}
if (raw.address[2] == ','){
street = raw.address[1]
city = raw.address[3]
state = raw.address[4]
zip = raw.address[5]
} else {(stop('document -> content -> restaurant -> primary_info -> address is not in anticipated format'))}
# move to menu node
path = which(as.logical(xmlApply(g.child, xmlAttrs) == 'menu'))
this.menu = g.child[[path]]
num.categories = length(xmlApply(this.menu, xmlAttrs))
\
require('XML')
datum.names = c('restaurant', 'phone', 'street', 'city', 'state', 'zip',
'menu', 'category', 'item', 'price', 'low', 'high')
data.out = NULL
menu.type = sub('http:.*/(.*)/$', '\\1', document$file)
top = xmlRoot(document)
children = xmlChildren(top)$body
path = which(as.logical(xmlApply(children, xmlAttrs) == 'content'))
child = children[[path]]
path = as.numeric(which(xmlApply(child, xmlGetAttr, 'id') == 'restaurant'))
g.child = child[[path]]
is.element('menu', xmlApply(g.child, xmlAttrs))
name = xmlValue(g.child[[as.numeric(which(xmlApply(g.child, xmlAttrs) == 'name'))]])
path = as.numeric(which(xmlApply(g.child, xmlAttrs) == 'primary_info'))
restaurant.info = g.child[[path]]
raw.address = as.character(xmlApply(restaurant.info[[as.numeric(which(xmlApply(restaurant.info, xmlGetAttr, 'id') == 'address'))]], xmlValue))
raw.phone = xmlValue(restaurant.info[[which(xmlApply(restaurant.info, xmlGetAttr, 'id') == 'phone_number')]])
if (length(raw.phone) == 0){
phone = 'NA'
} else {
phone = sub('\\(([[:digit:]]+)\\) (.*)', '\\1-\\2', raw.phone)
}
if (raw.address[2] == ','){
street = raw.address[1]
city = raw.address[3]
state = raw.address[4]
zip = raw.address[5]
} else {(stop('document -> content -> restaurant -> primary_info -> address is not in anticipated format'))}
path = which(as.logical(xmlApply(g.child, xmlAttrs) == 'menu'))
this.menu = g.child[[path]]
num.categories = length(xmlApply(this.menu, xmlAttrs))
num.categories
for (category in 1:8){#num.categories){
this.category = this.menu[[category]]
category.string = xmlValue(this.category[[as.numeric(which(xmlApply(this.category, xmlAttrs) == 'category_head'))]][[1]])
if (length(category.string) == 0){
category.string = NA
}
category.child = this.category[[2]]
num.items.in.category = length(xmlApply(category.child, xmlAttrs))
for (item in 1:num.items.in.category){
this.item = category.child[[item]]
item.name = xmlValue(this.item[[which(xmlApply(this.item, xmlAttrs) == 'name')]])
if (length(item.name) == 0){
} else{
if (is.element('price', xmlApply(this.item, xmlAttrs))){
item.price.string = xmlValue(this.item[[which(xmlApply(this.item, xmlAttrs) == 'price')]])
if (sub('(.*) - .*', '\\1', item.price.string) == item.price.string){
item.price = as.numeric(sub('\\$([[:digit:]]+\\.[[:digit:]]+)', '\\1', item.price.string))
item.low = NA
item.high = NA
} else{
item.price = NA
priceString1 = sub('(.*) - (.*)', '\\1', item.price.string)
priceString2 = sub('(.*) - (.*)', '\\2', item.price.string)
price1 = as.numeric(sub('\\$(.*)', '\\1', priceString1))
price2 = as.numeric(sub('\\$(.*)', '\\1', priceString2))
item.low = min(c(price1, price2))
item.high = max(c(price1, price2))
}
} else {
item.price = NA
item.low = NA
item.high = NA
}
#     item.description = xmlValue(this.item[[which(xmlApply(this.item, xmlAttrs) == 'description')]])
if (sum(na.exclude(c(item.price, item.low, item.high))) != 0){
newline = c(name, phone, street, city, state, zip,
menu.type, category.string, item.name,
item.price, item.low, item.high)
cleanNewline = gsub("'", "", newline)
cleanNewline = gsub('"', '', cleanNewline)
if (length(newline) != length(datum.names)){
print(newline)
}
data.out = rbind(data.out, cleanNewline) #, item.description))
} else {
}
}
}
}
category
this.category = this.menu[[category]]
this.category
category = 7
this.category = this.menu[[category]]
this.category
for (category in 1:7){#num.categories){
this.category = this.menu[[category]]
category.string = xmlValue(this.category[[as.numeric(which(xmlApply(this.category, xmlAttrs) == 'category_head'))]][[1]])
if (length(category.string) == 0){
category.string = NA
}
category.child = this.category[[2]]
num.items.in.category = length(xmlApply(category.child, xmlAttrs))
for (item in 1:num.items.in.category){
this.item = category.child[[item]]
item.name = xmlValue(this.item[[which(xmlApply(this.item, xmlAttrs) == 'name')]])
if (length(item.name) == 0){
} else{
if (is.element('price', xmlApply(this.item, xmlAttrs))){
item.price.string = xmlValue(this.item[[which(xmlApply(this.item, xmlAttrs) == 'price')]])
if (sub('(.*) - .*', '\\1', item.price.string) == item.price.string){
item.price = as.numeric(sub('\\$([[:digit:]]+\\.[[:digit:]]+)', '\\1', item.price.string))
item.low = NA
item.high = NA
} else{
item.price = NA
priceString1 = sub('(.*) - (.*)', '\\1', item.price.string)
priceString2 = sub('(.*) - (.*)', '\\2', item.price.string)
price1 = as.numeric(sub('\\$(.*)', '\\1', priceString1))
price2 = as.numeric(sub('\\$(.*)', '\\1', priceString2))
item.low = min(c(price1, price2))
item.high = max(c(price1, price2))
}
} else {
item.price = NA
item.low = NA
item.high = NA
}
#     item.description = xmlValue(this.item[[which(xmlApply(this.item, xmlAttrs) == 'description')]])
if (sum(na.exclude(c(item.price, item.low, item.high))) != 0){
newline = c(name, phone, street, city, state, zip,
menu.type, category.string, item.name,
item.price, item.low, item.high)
cleanNewline = gsub("'", "", newline)
cleanNewline = gsub('"', '', cleanNewline)
if (length(newline) != length(datum.names)){
print(newline)
}
data.out = rbind(data.out, cleanNewline) #, item.description))
} else {
}
}
}
}
data.out
source('parallelFuncs.R')
out = city.to.df(htmlList)
document = htmlList[[59]]
require('XML')
datum.names = c('restaurant', 'phone', 'street', 'city', 'state', 'zip',
'menu', 'category', 'item', 'price', 'low', 'high')
data.out = NULL
menu.type = sub('http:.*/(.*)/$', '\\1', document$file)
top = xmlRoot(document)
children = xmlChildren(top)$body
path = which(as.logical(xmlApply(children, xmlAttrs) == 'content'))
child = children[[path]]
path = as.numeric(which(xmlApply(child, xmlGetAttr, 'id') == 'restaurant'))
g.child = child[[path]]
if (!is.element('menu', xmlApply(g.child, xmlAttrs))){
return(NULL)
} else{
# getting basic restaurant info
name = xmlValue(g.child[[as.numeric(which(xmlApply(g.child, xmlAttrs) == 'name'))]])
path = as.numeric(which(xmlApply(g.child, xmlAttrs) == 'primary_info'))
restaurant.info = g.child[[path]]
raw.address = as.character(xmlApply(restaurant.info[[as.numeric(which(xmlApply(restaurant.info, xmlGetAttr, 'id') == 'address'))]], xmlValue))
raw.phone = xmlValue(restaurant.info[[which(xmlApply(restaurant.info, xmlGetAttr, 'id') == 'phone_number')]])
if (length(raw.phone) == 0){
phone = 'NA'
} else {
phone = sub('\\(([[:digit:]]+)\\) (.*)', '\\1-\\2', raw.phone)
}
if (raw.address[2] == ','){
street = raw.address[1]
city = raw.address[3]
state = raw.address[4]
zip = raw.address[5]
} else {(stop('document -> content -> restaurant -> primary_info -> address is not in anticipated format'))}
# move to menu node
path = which(as.logical(xmlApply(g.child, xmlAttrs) == 'menu'))
this.menu = g.child[[path]]
num.categories = length(xmlApply(this.menu, xmlAttrs)) - 1
}
num.categories
category = 1
this.category = this.menu[[category]]
this.category
category = 2
this.category = this.menu[[category]]
this.category
length(this.category)
category = 1
this.category = this.menu[[category]]
this.category
length(this.category)
category =3
this.category = this.menu[[category]]
this.category
source('parallelFuncs.R')
out = city.to.df(htmlList)
num.categories
num.categories = length(xmlApply(this.menu, xmlAttrs))
num.categories
for (category in 1:num.categories){
this.category = this.menu[[category]]
if(length(this.category) == 0){} else{
category.string = xmlValue(this.category[[as.numeric(which(xmlApply(this.category, xmlAttrs) == 'category_head'))]][[1]])
if (length(category.string) == 0){
category.string = NA
}
category.child = this.category[[2]]
num.items.in.category = length(xmlApply(category.child, xmlAttrs))
for (item in 1:num.items.in.category){
this.item = category.child[[item]]
item.name = xmlValue(this.item[[which(xmlApply(this.item, xmlAttrs) == 'name')]])
if (length(item.name) == 0){
} else{
if (is.element('price', xmlApply(this.item, xmlAttrs))){
item.price.string = xmlValue(this.item[[which(xmlApply(this.item, xmlAttrs) == 'price')]])
if (sub('(.*) - .*', '\\1', item.price.string) == item.price.string){
item.price = as.numeric(sub('\\$([[:digit:]]+\\.[[:digit:]]+)', '\\1', item.price.string))
item.low = NA
item.high = NA
} else{
item.price = NA
priceString1 = sub('(.*) - (.*)', '\\1', item.price.string)
priceString2 = sub('(.*) - (.*)', '\\2', item.price.string)
price1 = as.numeric(sub('\\$(.*)', '\\1', priceString1))
price2 = as.numeric(sub('\\$(.*)', '\\1', priceString2))
item.low = min(c(price1, price2))
item.high = max(c(price1, price2))
}
} else {
item.price = NA
item.low = NA
item.high = NA
}
#     item.description = xmlValue(this.item[[which(xmlApply(this.item, xmlAttrs) == 'description')]])
if (sum(na.exclude(c(item.price, item.low, item.high))) != 0){
newline = c(name, phone, street, city, state, zip,
menu.type, category.string, item.name,
item.price, item.low, item.high)
cleanNewline = gsub("'", "", newline)
cleanNewline = gsub('"', '', cleanNewline)
if (length(newline) != length(datum.names)){
print(newline)
}
data.out = rbind(data.out, cleanNewline) #, item.description))
} else {
}
}
}
}
}
category
this.category = this.menu[[category]]
this.category
length(this.category)
category.string = xmlValue(this.category[[as.numeric(which(xmlApply(this.category, xmlAttrs) == 'category_head'))]][[1]])
xmlApply(this.category, xmlAttrs)
document$file
load('allAbqRestHtmlList.Rout')
out = city.to.df(htmlList)
getwd()
save(out, file = 'abqData.Rout')
write.table(out, file = 'abqData.txt', row.names = F, col.names = T, sep = ' ', na = 'NA')
