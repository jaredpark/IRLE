}
if (raw.address[2] == ','){
street = raw.address[1]
city = raw.address[3]
state = raw.address[4]
zip = raw.address[5]
} else {(stop('document -> content -> restaurant -> primary_info -> address is not in anticipated format'))}
# move to menu node
path = which(as.logical(xmlApply(g.child, xmlAttrs) == 'menu'))
menuHead = g.child[[path]]
if (newFormat){
numMenus = length(xmlApply(this.menu, xmlAttrs)) - 2
for (menuNum in 1:numMenus){
menuTag = xmlApply(menuHead, xmlAttrs)[[menuNum]][[1]]
menu.type = sub('sp_menu_([[:alpha:]]+)-menu', '\\1', menuTag)
this.menu = menuHead[[menuNum]]
menuOut = menuHelper(this.menu, menu.type)
data.out = rbind(data.out, menuOut)
}
} else {
menu.type = sub('http:.*/(.*)/$', '\\1', document$file)
data.out = menuHelper(menuHead, menu.type)
}
if (is.null(data.out)){
} else {
colnames(data.out) = datum.names
return(data.out)
}
}
}
menuHelper = function(this.menu, menu.type, notLastCat = F){
num.categories = length(xmlApply(this.menu, xmlAttrs))
num.categories = ifelse(notLastCat, num.categories - 1, num.categories)
for (category in 1:num.categories){
this.category = this.menu[[category]]
category.string = xmlValue(this.category[[as.numeric(which(xmlApply(this.category, xmlAttrs) == 'category_head'))]][[1]])
if (length(category.string) == 0){
category.string = NA
}
category.child = this.category[[2]]
num.items.in.category = length(xmlApply(category.child, xmlAttrs))
for (item in 1:num.items.in.category){
this.item = category.child[[item]]
item.name = xmlValue(this.item[[which(xmlApply(this.item, xmlAttrs) == 'name')]])
if (length(item.name) == 0){
} else{
if (is.element('price', xmlApply(this.item, xmlAttrs))){
item.price.string = xmlValue(this.item[[which(xmlApply(this.item, xmlAttrs) == 'price')]])
if (sub('(.*) - .*', '\\1', item.price.string) == item.price.string){
item.price = as.numeric(sub('\\$([[:digit:]]+\\.[[:digit:]]+)', '\\1', item.price.string))
item.low = NA
item.high = NA
} else{
item.price = NA
priceString1 = sub('(.*) - (.*)', '\\1', item.price.string)
priceString2 = sub('(.*) - (.*)', '\\2', item.price.string)
price1 = as.numeric(sub('\\$(.*)', '\\1', priceString1))
price2 = as.numeric(sub('\\$(.*)', '\\1', priceString2))
item.low = min(c(price1, price2))
item.high = max(c(price1, price2))
}
} else {
item.price = NA
item.low = NA
item.high = NA
}
#     item.description = xmlValue(this.item[[which(xmlApply(this.item, xmlAttrs) == 'description')]])
if (sum(na.exclude(c(item.price, item.low, item.high))) != 0){
newline = c(name, phone, street, city, state, zip,
menu.type, category.string, item.name,
item.price, item.low, item.high)
cleanNewline = gsub("'", "", newline)
cleanNewline = gsub('"', '', cleanNewline)
if (length(newline) != length(datum.names)){
print(newline)
}
data.out = rbind(data.out, cleanNewline) #, item.description))
} else {
}
}
}
}
return(data.out)
}
menu.to.matrix(document)
menu.to.matrix(document, newFormat = T)
newFormat = T
require('XML')
datum.names = c('restaurant', 'phone', 'street', 'city', 'state', 'zip',
'menu', 'category', 'item', 'price', 'low', 'high')
data.out = NULL
top = xmlRoot(document)
children = xmlChildren(top)$body
path = which(as.logical(xmlApply(children, xmlAttrs) == 'content'))
child = children[[path]]
path = as.numeric(which(xmlApply(child, xmlGetAttr, 'id') == 'restaurant'))
g.child = child[[path]]
name = xmlValue(g.child[[as.numeric(which(xmlApply(g.child, xmlAttrs) == 'name'))]])
path = as.numeric(which(xmlApply(g.child, xmlAttrs) == 'primary_info'))
restaurant.info = g.child[[path]]
raw.address = as.character(xmlApply(restaurant.info[[as.numeric(which(xmlApply(restaurant.info, xmlGetAttr, 'id') == 'address'))]], xmlValue))
raw.phone = xmlValue(restaurant.info[[which(xmlApply(restaurant.info, xmlGetAttr, 'id') == 'phone_number')]])
if (length(raw.phone) == 0){
phone = 'NA'
} else {
phone = sub('\\(([[:digit:]]+)\\) (.*)', '\\1-\\2', raw.phone)
}
street = raw.address[1]
city = raw.address[3]
state = raw.address[4]
zip = raw.address[5]
path = which(as.logical(xmlApply(g.child, xmlAttrs) == 'menu'))
menuHead = g.child[[path]]
numMenus = length(xmlApply(this.menu, xmlAttrs)) - 2
for (menuNum in 1:numMenus){
menuTag = xmlApply(menuHead, xmlAttrs)[[menuNum]][[1]]
menu.type = sub('sp_menu_([[:alpha:]]+)-menu', '\\1', menuTag)
this.menu = menuHead[[menuNum]]
menuOut = menuHelper(this.menu, menu.type)
data.out = rbind(data.out, menuOut)
}
menuNum
numMenus
xmlApply(this.menu, xmlAttrs)
path = which(as.logical(xmlApply(g.child, xmlAttrs) == 'menu'))
menuHead = g.child[[path]]
numMenus = length(xmlApply(menuHead, xmlAttrs)) - 2
for (menuNum in 1:numMenus){
menuTag = xmlApply(menuHead, xmlAttrs)[[menuNum]][[1]]
menu.type = sub('sp_menu_([[:alpha:]]+)-menu', '\\1', menuTag)
this.menu = menuHead[[menuNum]]
menuOut = menuHelper(this.menu, menu.type)
data.out = rbind(data.out, menuOut)
}
menu.to.matrix = function(document, notLastCat = F, newFormat = F){
require('XML')
datum.names = c('restaurant', 'phone', 'street', 'city', 'state', 'zip',
'menu', 'category', 'item', 'price', 'low', 'high')
data.out = NULL
top = xmlRoot(document)
children = xmlChildren(top)$body
path = which(as.logical(xmlApply(children, xmlAttrs) == 'content'))
child = children[[path]]
path = as.numeric(which(xmlApply(child, xmlGetAttr, 'id') == 'restaurant'))
g.child = child[[path]]
if (!is.element('menu', xmlApply(g.child, xmlAttrs))){
return(NULL)
} else{
# getting basic restaurant info
name = xmlValue(g.child[[as.numeric(which(xmlApply(g.child, xmlAttrs) == 'name'))]])
path = as.numeric(which(xmlApply(g.child, xmlAttrs) == 'primary_info'))
restaurant.info = g.child[[path]]
raw.address = as.character(xmlApply(restaurant.info[[as.numeric(which(xmlApply(restaurant.info, xmlGetAttr, 'id') == 'address'))]], xmlValue))
raw.phone = xmlValue(restaurant.info[[which(xmlApply(restaurant.info, xmlGetAttr, 'id') == 'phone_number')]])
if (length(raw.phone) == 0){
phone = 'NA'
} else {
phone = sub('\\(([[:digit:]]+)\\) (.*)', '\\1-\\2', raw.phone)
}
if (raw.address[2] == ','){
street = raw.address[1]
city = raw.address[3]
state = raw.address[4]
zip = raw.address[5]
} else {(stop('document -> content -> restaurant -> primary_info -> address is not in anticipated format'))}
# move to menu node
path = which(as.logical(xmlApply(g.child, xmlAttrs) == 'menu'))
menuHead = g.child[[path]]
if (newFormat){
numMenus = length(xmlApply(menuHead, xmlAttrs)) - 2
for (menuNum in 1:numMenus){
menuTag = xmlApply(menuHead, xmlAttrs)[[menuNum]][[1]]
menu.type = sub('sp_menu_([[:alpha:]]+)-menu', '\\1', menuTag)
this.menu = menuHead[[menuNum]]
menuOut = menuHelper(this.menu, menu.type)
data.out = rbind(data.out, menuOut)
}
} else {
menu.type = sub('http:.*/(.*)/$', '\\1', document$file)
data.out = menuHelper(menuHead, menu.type)
}
if (is.null(data.out)){
} else {
colnames(data.out) = datum.names
return(data.out)
}
}
}
menu.to.matrix(document, newFormat = T)
rm(data.out)
menu.to.matrix(document, newFormat = T)
menuHelper = function(this.menu, menu.type, notLastCat = F){
data.out = NULL
num.categories = length(xmlApply(this.menu, xmlAttrs))
num.categories = ifelse(notLastCat, num.categories - 1, num.categories)
for (category in 1:num.categories){
this.category = this.menu[[category]]
category.string = xmlValue(this.category[[as.numeric(which(xmlApply(this.category, xmlAttrs) == 'category_head'))]][[1]])
if (length(category.string) == 0){
category.string = NA
}
category.child = this.category[[2]]
num.items.in.category = length(xmlApply(category.child, xmlAttrs))
for (item in 1:num.items.in.category){
this.item = category.child[[item]]
item.name = xmlValue(this.item[[which(xmlApply(this.item, xmlAttrs) == 'name')]])
if (length(item.name) == 0){
} else{
if (is.element('price', xmlApply(this.item, xmlAttrs))){
item.price.string = xmlValue(this.item[[which(xmlApply(this.item, xmlAttrs) == 'price')]])
if (sub('(.*) - .*', '\\1', item.price.string) == item.price.string){
item.price = as.numeric(sub('\\$([[:digit:]]+\\.[[:digit:]]+)', '\\1', item.price.string))
item.low = NA
item.high = NA
} else{
item.price = NA
priceString1 = sub('(.*) - (.*)', '\\1', item.price.string)
priceString2 = sub('(.*) - (.*)', '\\2', item.price.string)
price1 = as.numeric(sub('\\$(.*)', '\\1', priceString1))
price2 = as.numeric(sub('\\$(.*)', '\\1', priceString2))
item.low = min(c(price1, price2))
item.high = max(c(price1, price2))
}
} else {
item.price = NA
item.low = NA
item.high = NA
}
#     item.description = xmlValue(this.item[[which(xmlApply(this.item, xmlAttrs) == 'description')]])
if (sum(na.exclude(c(item.price, item.low, item.high))) != 0){
newline = c(name, phone, street, city, state, zip,
menu.type, category.string, item.name,
item.price, item.low, item.high)
cleanNewline = gsub("'", "", newline)
cleanNewline = gsub('"', '', cleanNewline)
if (length(newline) != length(datum.names)){
print(newline)
}
data.out = rbind(data.out, cleanNewline) #, item.description))
} else {
}
}
}
}
return(data.out)
}
menu.to.matrix(document, newFormat = T)
menu.to.matrix
length(city.rest.list)
city.rest.list = htmlList
city.df.out = NULL
num.rest.no.prices.in.city = 0
for (rest in 1:length(city.rest.list)){
print(rest)
restaurant.matrix = menu.to.matrix(city.rest.list[[rest]], newFormat = T)
restaurant.df = as.data.frame(restaurant.matrix, stringsAsFactors = F)
has.prices = sum(na.exclude(as.numeric(restaurant.df$price))) != 0
if (has.prices){
city.df.out = rbind(city.df.out, restaurant.df)
}
}
document = city.rest.list[[1]]
require('XML')
datum.names = c('restaurant', 'phone', 'street', 'city', 'state', 'zip',
'menu', 'category', 'item', 'price', 'low', 'high')
data.out = NULL
top = xmlRoot(document)
children = xmlChildren(top)$body
path = which(as.logical(xmlApply(children, xmlAttrs) == 'content'))
child = children[[path]]
path = as.numeric(which(xmlApply(child, xmlGetAttr, 'id') == 'restaurant'))
g.child = child[[path]]
name = xmlValue(g.child[[as.numeric(which(xmlApply(g.child, xmlAttrs) == 'name'))]])
path = as.numeric(which(xmlApply(g.child, xmlAttrs) == 'primary_info'))
restaurant.info = g.child[[path]]
raw.address = as.character(xmlApply(restaurant.info[[as.numeric(which(xmlApply(restaurant.info, xmlGetAttr, 'id') == 'address'))]], xmlValue))
raw.phone = xmlValue(restaurant.info[[which(xmlApply(restaurant.info, xmlGetAttr, 'id') == 'phone_number')]])
if (length(raw.phone) == 0){
phone = 'NA'
} else {
phone = sub('\\(([[:digit:]]+)\\) (.*)', '\\1-\\2', raw.phone)
}
street = raw.address[1]
city = raw.address[3]
state = raw.address[4]
zip = raw.address[5]
path = which(as.logical(xmlApply(g.child, xmlAttrs) == 'menu'))
menuHead = g.child[[path]]
xmlApply(menuHead, xmlAttrs)
xmlApply(g.child, xmlAttrs)
xmlApply(menuHead, xmlAttrs)
name
xmlApply(menuHead, xmlAttrs)
as.character(xmlApply(menuHead, xmlAttrs))
is.element('category', as.character(xmlApply(menuHead, xmlAttrs)))
!is.element('category', as.character(xmlApply(menuHead, xmlAttrs)))
source('parallelFuncs.R')
source('parallelFuncs.R')
as.character(xmlApply(menuHead[[1]], xmlAttrs))
source('parallelFuncs.R')
city.rest.list = htmlList
city.df.out = NULL
num.rest.no.prices.in.city = 0
for (rest in 1:length(city.rest.list)){
print(rest)
restaurant.matrix = menu.to.matrix(city.rest.list[[rest]])
restaurant.df = as.data.frame(restaurant.matrix, stringsAsFactors = F)
has.prices = sum(na.exclude(as.numeric(restaurant.df$price))) != 0
if (has.prices){
city.df.out = rbind(city.df.out, restaurant.df)
}
}
require('XML')
datum.names = c('restaurant', 'phone', 'street', 'city', 'state', 'zip',
'menu', 'category', 'item', 'price', 'low', 'high')
data.out = NULL
top = xmlRoot(document)
children = xmlChildren(top)$body
path = which(as.logical(xmlApply(children, xmlAttrs) == 'content'))
child = children[[path]]
path = as.numeric(which(xmlApply(child, xmlGetAttr, 'id') == 'restaurant'))
g.child = child[[path]]
name = xmlValue(g.child[[as.numeric(which(xmlApply(g.child, xmlAttrs) == 'name'))]])
path = as.numeric(which(xmlApply(g.child, xmlAttrs) == 'primary_info'))
restaurant.info = g.child[[path]]
raw.address = as.character(xmlApply(restaurant.info[[as.numeric(which(xmlApply(restaurant.info, xmlGetAttr, 'id') == 'address'))]], xmlValue))
raw.phone = xmlValue(restaurant.info[[which(xmlApply(restaurant.info, xmlGetAttr, 'id') == 'phone_number')]])
if (length(raw.phone) == 0){
phone = 'NA'
} else {
phone = sub('\\(([[:digit:]]+)\\) (.*)', '\\1-\\2', raw.phone)
}
if (raw.address[2] == ','){
street = raw.address[1]
city = raw.address[3]
state = raw.address[4]
zip = raw.address[5]
} else {(stop('document -> content -> restaurant -> primary_info -> address is not in anticipated format'))}
# move to menu node
path = which(as.logical(xmlApply(g.child, xmlAttrs) == 'menu'))
menuHead = g.child[[path]]
newFormat = !is.element('category', as.character(xmlApply(menuHead, xmlAttrs)))
newFormat
notLastCat = T
menu.type = sub('http:.*/(.*)/$', '\\1', document$file)
data.out = menuHelper(menuHead, menu.type)
this.menu = menuHead
menu.type
data.out = NULL
xmlApply(this.menu, xmlAttrs)
notLastCat
length(xmlApply(this.menu, xmlAttrs))
num.categories = length(xmlApply(this.menu, xmlAttrs)) - notLastCat
num.categories
notLastCat
num.categories = length(xmlApply(this.menu, xmlAttrs)) - notLastCat
for (category in 1:num.categories){
this.category = this.menu[[category]]
category.string = xmlValue(this.category[[as.numeric(which(xmlApply(this.category, xmlAttrs) == 'category_head'))]][[1]])
if (length(category.string) == 0){
category.string = NA
}
category.child = this.category[[2]]
num.items.in.category = length(xmlApply(category.child, xmlAttrs))
for (item in 1:num.items.in.category){
this.item = category.child[[item]]
item.name = xmlValue(this.item[[which(xmlApply(this.item, xmlAttrs) == 'name')]])
if (length(item.name) == 0){
} else{
if (is.element('price', xmlApply(this.item, xmlAttrs))){
item.price.string = xmlValue(this.item[[which(xmlApply(this.item, xmlAttrs) == 'price')]])
if (sub('(.*) - .*', '\\1', item.price.string) == item.price.string){
item.price = as.numeric(sub('\\$([[:digit:]]+\\.[[:digit:]]+)', '\\1', item.price.string))
item.low = NA
item.high = NA
} else{
item.price = NA
priceString1 = sub('(.*) - (.*)', '\\1', item.price.string)
priceString2 = sub('(.*) - (.*)', '\\2', item.price.string)
price1 = as.numeric(sub('\\$(.*)', '\\1', priceString1))
price2 = as.numeric(sub('\\$(.*)', '\\1', priceString2))
item.low = min(c(price1, price2))
item.high = max(c(price1, price2))
}
} else {
item.price = NA
item.low = NA
item.high = NA
}
#     item.description = xmlValue(this.item[[which(xmlApply(this.item, xmlAttrs) == 'description')]])
if (sum(na.exclude(c(item.price, item.low, item.high))) != 0){
newline = c(name, phone, street, city, state, zip,
menu.type, category.string, item.name,
item.price, item.low, item.high)
cleanNewline = gsub("'", "", newline)
cleanNewline = gsub('"', '', cleanNewline)
if (length(newline) != length(datum.names)){
print(newline)
}
data.out = rbind(data.out, cleanNewline) #, item.description))
} else {
}
}
}
}
source('parallelFuncs.R')
city.rest.list = htmlList
city.df.out = NULL
num.rest.no.prices.in.city = 0
for (rest in 1:length(city.rest.list)){
print(rest)
restaurant.matrix = menu.to.matrix(city.rest.list[[rest]])
restaurant.df = as.data.frame(restaurant.matrix, stringsAsFactors = F)
has.prices = sum(na.exclude(as.numeric(restaurant.df$price))) != 0
if (has.prices){
city.df.out = rbind(city.df.out, restaurant.df)
}
}
source('./july Bernalillo/parallelFuncs.R')
city.rest.list = htmlList
city.df.out = NULL
num.rest.no.prices.in.city = 0
for (rest in 1:length(city.rest.list)){
print(rest)
restaurant.matrix = menu.to.matrix(city.rest.list[[rest]])
restaurant.df = as.data.frame(restaurant.matrix, stringsAsFactors = F)
has.prices = sum(na.exclude(as.numeric(restaurant.df$price))) != 0
if (has.prices){
city.df.out = rbind(city.df.out, restaurant.df)
}
}
source('~/GitHub/IRLE/menu.scrape/parallelFuncs.R')
city.rest.list = htmlList
city.df.out = NULL
num.rest.no.prices.in.city = 0
for (rest in 1:length(city.rest.list)){
print(rest)
restaurant.matrix = menu.to.matrix(city.rest.list[[rest]])
restaurant.df = as.data.frame(restaurant.matrix, stringsAsFactors = F)
has.prices = sum(na.exclude(as.numeric(restaurant.df$price))) != 0
if (has.prices){
city.df.out = rbind(city.df.out, restaurant.df)
}
}
length(city.rest.list)
sum(duplicated(city.df.out))
which(duplicated(city.df.out))
city.df.out[297,]
which(city.df.out$item == 'Grilled 8 oz. Double Lamb Chop from Talus Wind Ranch')
city.df.out[296:297,]
bernalillo = city.df.out[-which(duplicated(city.df.out)),]
sum(nm$city != 'Albuquerque')
sum(nm$city[-duplicated(nm)] != 'Albuquerque')
mean(duplicated(nm))
sum(duplicated(nm))
sum(duplicated(nm[nm$city != 'Albuquerque']))
sum(duplicated(nm[nm$city != 'Albuquerque',]))
source('~/GitHub/IRLE/menu.scrape/parallelFuncs.R')
city.rest.list = htmlList
city.df.out = NULL
num.rest.no.prices.in.city = 0
for (rest in 1:length(city.rest.list)){
print(rest)
restaurant.matrix = menu.to.matrix(city.rest.list[[rest]])
restaurant.df = as.data.frame(restaurant.matrix, stringsAsFactors = F)
has.prices = sum(na.exclude(as.numeric(restaurant.df$price))) != 0
if (has.prices){
city.df.out = rbind(city.df.out, restaurant.df)
}
}
length(duplicated(city.df.out))
sum(duplicated(city.df.out))
angstrom
specialToNothing
cleanBernalillo = apply(bernalillo, 1, specialToNothing)
cleanBernalillo = data.frame(apply(bernalillo, 1, specialToNothing), strings.as = F)
file.location
save(cleanBernalillo, file = '~/GitHub/IRLE/menu.scrape/july Bernalillo/bernalilloNoAbq.Rout')
write.table(cleanBernalillo, file = '~/GitHub/IRLE/menu.scrape/july Bernalillo/bernalilloNoAbq.txt', row.names = F, col.names = T, sep = ' ', na = 'NA')
cleanBernalillo = data.frame(apply(bernalillo, 2, specialToNothing), strings.as = F)
cleanBernalillo[1,]
?data.frame
cleanBernalillo = data.frame(apply(bernalillo, 2, specialToNothing), stringsAsFactors = F)
?data.frame
cleanBernalillo[1,]
save(cleanBernalillo, file = '~/GitHub/IRLE/menu.scrape/july Bernalillo/bernalilloNoAbq.Rout')
write.table(cleanBernalillo, file = '~/GitHub/IRLE/menu.scrape/july Bernalillo/bernalilloNoAbq.txt', row.names = F, col.names = T, sep = ' ', na = 'NA')
length(unique(bernalillo$restaurant))
source('~/GitHub/IRLE/menu.scrape/parallelFuncs.R')
city.rest.list = htmlList
city.df.out = NULL
num.rest.no.prices.in.city = 0
for (rest in 1:length(city.rest.list)){
print(rest)
restaurant.matrix = menu.to.matrix(city.rest.list[[rest]])
restaurant.df = as.data.frame(restaurant.matrix, stringsAsFactors = F)
has.prices = sum(na.exclude(as.numeric(restaurant.df$price))) != 0
if (has.prices){
city.df.out = rbind(city.df.out, restaurant.df)
}
}
length(unique(bernalillo$restaurant))
bernalillo = city.df.out[-which(duplicated(city.df.out)),]
length(unique(bernalillo$restaurant))
length(bernalilloNeeded)
length(unique(rests))
sum(bernalillo$restaurant == 'Andele Resatuarant')
sum(bernalillo$restaurant == 'Andele Resatuarante')
sum(bernalillo$restaurant == 'Andele Restaurante')
cleanBernalillo = data.frame(apply(bernalillo, 2, specialToNothing), stringsAsFactors = F)
save(cleanBernalillo, file = '~/GitHub/IRLE/menu.scrape/july Bernalillo/bernalilloNoAbq.Rout')
write.table(cleanBernalillo, file = '~/GitHub/IRLE/menu.scrape/july Bernalillo/bernalilloNoAbq.txt', row.names = F, col.names = T, sep = ' ', na = 'NA')
